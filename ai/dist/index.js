(()=>{"use strict";var t={92:(t,e,n)=>{var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("unable to locate global object")}();t.exports=e=r.fetch,r.fetch&&(e.default=r.fetch.bind(r)),e.Headers=r.Headers,e.Request=r.Request,e.Response=r.Response}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);class r{constructor(t){this.body=t.body,this.queries=t.queries,this.headers=t.headers,this.method=t.method,this.path=t.path,this.secret=t.secret}async json(){return JSON.parse(this.body)}}class o{constructor(t,e){this.status=e?.status??200,this.body=t,this.headers={"Content-Type":"application/json","Access-Control-Allow-Origin":"*",...e?.headers}}}var i=n(92),a=n.n(i);async function s(t,e,n="gpt-4o"){const r=await a()("https://api.red-pill.ai/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({messages:[{role:"user",content:t}],model:n})}),o=await r.json();if(o.error)throw new Error(o.error);return o.choices[0].message.content}async function c(t,e){const n=`Based on the following prediction market data, generate 3 new, creative prediction questions that are related to the themes present in the data but not exact duplicates. Each question should be specific, measurable, and have a clear timeframe. The Current Year is 2024. Always create predictions further than the current time. Output in the format given as an example.\n  \n  Example format:\n  {\n\t"description": "Will the European Central Bank officially launch the digital euro by the end of 2025?",\n\t"duration": 63072000,\n\t"minVotes": 1,\n\t"maxVotes": 1000,\n\t"predictionType": 0,\n\t"optionsCount": 2,\n\t"tags": ["finance", "CBDC", "Euro", "regulation"]\n  }\n  \n  Strictly follow the example and always have minVotes as 1. Create near recent predictions. Don't include any comments or extra text, just provide well-formatted JSON objects.\n  \n  Here's the data:\n  \n  ${t}\n  \n  New Prediction Questions:`,r=(await s(n,e)).split("\n").filter((t=>""!==t.trim())),o=await async function(t,e){const n=`Format the following predictions into a valid JSON array, ensuring each prediction object has the correct structure with "description", "duration", "minVotes", "maxVotes", "predictionType", "optionsCount", and "tags" fields. Here are the predictions:\n  \n  ${t.join("\n")}\n  \n  Please output only the formatted JSON array, without any additional text or explanations.`,r=await s(n,e);try{return JSON.parse(r),r}catch(t){throw console.error("Error parsing formatted JSON:",t),new Error("Failed to format predictions into valid JSON")}}(r,e);return o}async function u(t){const e=t.queries,n=function(t){const e=t.secret||{};return"string"==typeof e.apiKey?e.apiKey:"sk-qVBlJkO3e99t81623PsB0zHookSQJxU360gDMooLenN01gv2"}(t),r=e.url?e.url[0]:"",i=e.query?e.query[0]:"",u=!!e.generatePredictions&&"true"===e.generatePredictions[0];if(r)try{const t=await async function(t){const e=await a()(t);return e.headers.get("content-type"),await e.text()}(r);if(u){const e=await c(t,n);return new o(JSON.stringify({predictions:e}))}{const e=await async function(t,e){const n=`Extract key information from the following content. Provide a JSON object with relevant fields such as title, author, date, main points, and any other important details. If the content is not an article, describe what it contains:\n\n${t}`,r=await s(n,e);return JSON.parse(r)}(t,n);return new o(JSON.stringify(e))}}catch(t){return console.error("Error processing content:",t),new o(JSON.stringify({error:"Failed to process content"}))}else{if(!i)return new o(JSON.stringify({error:"Either URL or query parameter is required"}));try{const t=await async function(t,e){const n=`Please answer the following question to the best of your ability: ${t}`;return await s(n,e)}(i,n);return new o(JSON.stringify({answer:t}))}catch(t){return console.error("Error answering question:",t),new o(JSON.stringify({error:"Failed to answer question"}))}}}(async function(t){return await async function(t,e){const n=JSON.parse(e);let i;const a=n.method,s=new r(n);return"GET"==a&&t.GET?i=await t.GET(s):"POST"==a&&t.POST?i=await t.POST(s):"PATCH"==a&&t.PATCH?i=await t.PATCH(s):"PUT"==a&&t.PUT?i=await t.PUT(s):(i=new o("Not Found"),i.status=404),JSON.stringify(i)}({GET:u},t)}).apply(null,globalThis.scriptArgs).then((t=>globalThis.scriptOutput=t)).catch((t=>globalThis.scriptOutput=JSON.stringify({error:t,success:!1})))})();